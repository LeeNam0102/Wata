@using Microsoft.AspNetCore.Components.Forms;
@using Wata.Commerce.Account.Module.Models.User;

<h1>@Mode user</h1>
<hr />
@if (User is not null)
{
    <EditForm Model="@User"
              OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
              OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudGrid Class="d-flex align-center">
			<MudItem xs="12">
			     <MudNumericField Label="AccessFailedCount" @bind-Value="User.AccessFailedCount"></MudNumericField>
			     <ValidationMessage For="@(() => User.AccessFailedCount)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="ConcurrencyStamp" @bind-Value="User.ConcurrencyStamp"></MudTextField>
			     <ValidationMessage For="@(() => User.ConcurrencyStamp)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="Email" @bind-Value="User.Email"></MudTextField>
			     <ValidationMessage For="@(() => User.Email)" />
			</MudItem>
			<MudItem xs="12">
			     <MudRadio Label="EmailConfirmed" @bind-Value="User.EmailConfirmed"></MudRadio>
			     <ValidationMessage For="@(() => User.EmailConfirmed)" />
			</MudItem>
			<MudItem xs="12">
			     <MudRadio Label="LockoutEnabled" @bind-Value="User.LockoutEnabled"></MudRadio>
			     <ValidationMessage For="@(() => User.LockoutEnabled)" />
			</MudItem>
			<MudItem xs="12">
			     
			     <ValidationMessage For="@(() => User.LockoutEnd)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="NormalizedEmail" @bind-Value="User.NormalizedEmail"></MudTextField>
			     <ValidationMessage For="@(() => User.NormalizedEmail)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="NormalizedUserName" @bind-Value="User.NormalizedUserName"></MudTextField>
			     <ValidationMessage For="@(() => User.NormalizedUserName)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="PasswordHash" @bind-Value="User.PasswordHash"></MudTextField>
			     <ValidationMessage For="@(() => User.PasswordHash)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="PhoneNumber" @bind-Value="User.PhoneNumber"></MudTextField>
			     <ValidationMessage For="@(() => User.PhoneNumber)" />
			</MudItem>
			<MudItem xs="12">
			     <MudRadio Label="PhoneNumberConfirmed" @bind-Value="User.PhoneNumberConfirmed"></MudRadio>
			     <ValidationMessage For="@(() => User.PhoneNumberConfirmed)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="SecurityStamp" @bind-Value="User.SecurityStamp"></MudTextField>
			     <ValidationMessage For="@(() => User.SecurityStamp)" />
			</MudItem>
			<MudItem xs="12">
			     <MudRadio Label="TwoFactorEnabled" @bind-Value="User.TwoFactorEnabled"></MudRadio>
			     <ValidationMessage For="@(() => User.TwoFactorEnabled)" />
			</MudItem>
			<MudItem xs="12">
			     <MudTextField Label="UserName" @bind-Value="User.UserName"></MudTextField>
			     <ValidationMessage For="@(() => User.UserName)" />
			</MudItem>
            <MudItem xs="6" Class="d-flex justify-end">
                <MudButton Disabled="@Busy" @onclick="CancelAsync" Variant="Variant.Filled" Color="Color.Default">Cancel</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Disabled="@Busy" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}
@code {
    /// <summary>
    /// Let parent handle result of validation.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    /// <summary>
    /// Let parent handle what to do on cancel.
    /// </summary>
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    /// <summary>
    /// <c>True</c> if add mode.
    /// </summary>
    [Parameter]
    public bool IsAdd { get; set; }

    /// <summary>
    /// The <see cref="User"/> to upsert.
    /// </summary>
    [Parameter]
    public UserModel? User { get; set; }

    /// <summary>
    /// Prevent multiple asynchronous operations at the same time.
    /// </summary>
    [Parameter]
    public bool Busy { get; set; }

    /// <summary>
    /// Mode.
    /// </summary>
    private string Mode => IsAdd ? "Add" : "Edit";

    /// <summary>
    /// Ask to cancel.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    /// <summary>
    /// Handle form submission request.
    /// </summary>
    /// <param name="isValid"><c>True</c> when field validation passed.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}