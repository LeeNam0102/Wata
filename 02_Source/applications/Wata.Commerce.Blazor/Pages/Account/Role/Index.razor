@page "/account/role"
@page "/account/role/{Page:int}"

@using Wata.Commerce.Common.Objects;
@using Wata.Commerce.Common.Component;
@using Wata.Commerce.Account.Dtos;
@using Wata.Commerce.Account.Module.Models.Role;
@using Wata.Commerce.Account.Module.Services;

@inherits PageBase
@inject NavigationManager Navigation
@inject IRoleFilters Filters
@inject IRoleService _roleService

<h1>Roles</h1>

<GridWrapper @ref="Wrapper" FilterChanged="ReloadAsync" DeleteRequested="id => Wrapper.DeleteRequestId = id">

    <MudGrid Class="d-flex align-center">
        <MudItem xs="2"><a class="btn btn-primary" href="/account/role/create">Add New Role</a></MudItem>
        <MudItem xs="2" Class="text-end">Filter by:</MudItem>
        <MudItem xs="6">
            <input type="text" class="form-control" autofocus @bind-value="FilterText" @bind-value:event="oninput" @onkeyup="Enter" />
        </MudItem>
        <MudItem xs="2">
            <button class="btn btn-danger" @onclick="@(async ()=> await Search())">Search</button>
        </MudItem>
    </MudGrid>

    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Class="mt-5" Style="height:300px;">
        <thead>
            <tr>
                <th></th>
                <th @onclick="@(async ()=>await ToggleAsync(RoleFilterColumns.Id))">
                     <SortIndicator Column="@(RoleFilterColumns.Id)" />Id
                </th>

                <th @onclick="@(async ()=>await ToggleAsync(RoleFilterColumns.ConcurrencyStamp))">
                     <SortIndicator Column="@(RoleFilterColumns.ConcurrencyStamp)" />ConcurrencyStamp
                </th>

                <th @onclick="@(async ()=>await ToggleAsync(RoleFilterColumns.Name))">
                     <SortIndicator Column="@(RoleFilterColumns.Name)" />Name
                </th>

                <th @onclick="@(async ()=>await ToggleAsync(RoleFilterColumns.NormalizedName))">
                     <SortIndicator Column="@(RoleFilterColumns.NormalizedName)" />NormalizedName
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Filters.Loading || Roles is null)
            {
                <tr>
                    <td colspan="5">
                        Loading...
                    </td>
                </tr>
            }
            @if (Roles is not null && Roles.Equals(0))
            {
                <tr>
                    <td colspan="5">
                        No roles found.
                    </td>
                </tr>
            }
            @if (Roles is not null)
            {
                @foreach (RoleModel role in Roles)
                {
                    <RoleRow @key=role CurrentRole="@role" DeleteRole="DeleteRoleAsync" />
                }
            }
        </tbody>
    </MudSimpleTable>
    <Paging Url="/account/role/" IsLoading="Filters.Loading" PageHelper="Filters.PageHelper"/>

</GridWrapper>

@code {
    /// <summary>
    /// The current page.
    /// </summary>
    [Parameter]
    public int Page
    {
        get => Filters.PageHelper.Page;
        set
        {
            Filters.PageHelper.Page = value;
        }
    }

    /// <summary>
    /// A wrapper for grid-related activity (like delete).
    /// </summary>
    private GridWrapper Wrapper { get; set; } = new GridWrapper();

    /// <summary>
    /// Current page of <see cref="Role"/>.
    /// </summary>
    private ICollection<RoleModel>? Roles { get; set; }

    /// <summary>
    /// Keeps track of the last page loaded.
    /// </summary>
    private int _lastPage = -1;

    /// <summary>
    /// Main logic when getting started.
    /// </summary>
    /// <param name="firstRender"><c>true</c> for first-time render.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        // Ensure we're on the same, er, right page.
        if (_lastPage < 1)
        {
            Navigation.NavigateTo("/account/role/1");
            return;
        }

        // Normalize the page values.
        if (Filters.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                Navigation.NavigateTo("/account/role/1");
                return;
            }
            if (Page > Filters.PageHelper.PageCount)
            {
                Navigation.NavigateTo($"/account/role/{Filters.PageHelper.PageCount}");
                return;
            }
        }
        base.OnAfterRender(firstRender);
    }

    /// <summary>
    /// Triggered for any paging update.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        // Make sure the page really chagned.
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Used to toggle the grid sort. Will either switch to "ascending" on a new
    /// column, or toggle beteween "ascending" and "descending" on a column with the
    /// sort already set.
    /// </summary>
    /// <param name="col">The <see cref="RoleFilterColumns"/> to toggle.</param>
    /// <returns>A <see cref="Task"/>.</returns>

    private Task ToggleAsync(RoleFilterColumns col)
    {
        if (Filters.SortColumn == col)
        {
            Filters.SortDescending = !Filters.SortDescending;
        }
        else
        {
            Filters.SortColumn = col;
        }
        return ReloadAsync();
    }

    /// <summary>
    /// Deletes a role.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    #region snippet1
    private async Task DeleteRoleAsync()
    {
        Filters.Loading = true;
        await _roleService.DeleteRoleAsync(Wrapper.DeleteRequestId);
        Filters.Loading = false;

        await ReloadAsync();
    }
    #endregion

    /// <summary>
    /// Reload page based on filters and paging controls.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ReloadAsync()
    {
        if (Filters.Loading || Page < 1)
        {
            return;
        }

        Filters.Loading = true;

        if (Wrapper is not null)
        {
            Wrapper.DeleteRequestId = 0;
        }

        PagedDto<RoleModel>? pagedDto = await _roleService.GetListRolesAsync(
            new RoleFilterDto {
                Keyword = Filters.FilterText,
                IsOutputTotal = true,
                OrderBy = Filters.FilterColumn.ToString(),
                IsDescending = Filters.SortDescending,
                PageIndex = Filters.PageHelper.Page, 
                PageSize = Filters.PageHelper.PageSize });

        Roles = pagedDto?.Data.ToList();
        Filters.PageHelper.TotalItemCount = pagedDto?.TotalRecords??0;
        Filters.PageHelper.PageItems = pagedDto?.Data.Count??0;

        Filters.Loading = false;
    }

    private string? filterText;

    /// <summary>
    /// Text to filter on.
    /// </summary>
    private string? FilterText
    {
        get => filterText;
        set
        {
            if (value != filterText)
            {
                filterText = value;
            }
        }
    }

    public async Task Search()
    {
        Filters.FilterText = FilterText;
        await ReloadAsync();
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }
}