@page "/sample/abc/create"

@using Wata.Commerce.Common.Helpers;
@using Wata.Commerce.Common.Component;
@using Wata.Commerce.Sample.Module.Services;
@using Wata.Commerce.Sample.Module.Models.Abc;

@inherits PageBase
@inject IAbcService _abcService
@inject NavigationManager Navigation
@inject IPageHelper PageHelper

@if (Abc is not null)
{
    <AbcForm Busy="@Busy" 
                   Abc="@Abc" 
                   IsAdd="true"
                   CancelRequest="Cancel"
                   ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (Success)
{
    <br />
    <div class="alert alert-success">The abc was successfully added.</div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to add the abc (@ErrorMessage).</div>
}

@code {
    /// <summary>
    /// New <see cref="Abc"/>.
    /// </summary>
    private AbcModel? Abc { get; set; }

    /// <summary>
    /// <c>True</c> when an asynchronous operation is running.
    /// </summary>
    private bool Busy;

    /// <summary>
    /// <c>True</c> after successful add.
    /// </summary>
    private bool Success;

    /// <summary>
    /// <c>True</c> when an error occurred.
    /// </summary>
    private bool Error;

    /// <summary>
    /// The error message
    /// </summary>
    private string ErrorMessage = string.Empty;

    /// <summary>
    /// Start with fresh <see cref="Abc"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override Task OnInitializedAsync()
    {
        Abc = new();
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// Respond to a forms submission.
    /// </summary>
    /// <param name="success"><c>True</c> when valid.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }

        Busy = true;

        try
        {
            AbcModel? newAbc = await _abcService.InsertAbcAsync(Abc);

            if (newAbc != null)
            {
                Success = true;
                Error = false;
                // ready for the next
                Abc = new AbcModel();
                Busy = false;
            }
            else
            {
                Success = false;
                Error = true;
                Busy = false;
            }

        }
        catch (Exception ex)
        {
            Success = false;
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Back to list.
    /// </summary>
    private void Cancel()
    {
        Navigation.NavigateTo($"/sample/abc/{PageHelper.Page}");
    }
}